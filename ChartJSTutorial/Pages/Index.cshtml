@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<script src="~/js/Chart.bundle.min.js"></script>


<div class="text-center">
    <h1 class="display-4">Invoice List</h1>
</div>

<table class="table table-sm">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.InvoiceList[0].InvoiceNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.InvoiceList[0].Amount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.InvoiceList[0].CostCategory)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.InvoiceList)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.InvoiceNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Amount)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CostCategory)
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="container">
    <canvas id="invChart" width="500" height="300"></canvas>
</div>

<script>    
    /////////
    var myAmounts = [];
    var myCategories = [];
    var myInvoices;
    


    function showChart() {
        myAmounts = myInvoices.AmountList;
        myCategories = myInvoices.CategoryList;
        console.log(myAmounts);
        console.log(myCategories);

        let popCanvasName = document.getElementById("invChart");
        let barChartName = new Chart(popCanvasName, {
          type: 'bar',
          data: {
            labels: myCategories,
              datasets: [{
                  label: 'Invoice data',
                  data: myAmounts,
                  backgroundColor: [
                      'rgba(255, 99, 132, 0.6)',
                      'rgba(54, 162, 235, 0.6)',
                      'rgba(255, 206, 86, 0.6)',
                      'rgba(75, 192, 192, 0.6)',
                      'rgba(153, 102, 255, 0.6)',                     
                  ]
              }]
            },
            options: {
                responsive: false,
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    }


    function getChartData() {
        return fetch('./Index?handler=InvoiceChartData',
            {
                method: 'get',
                headers: {
                    'Content-Type': 'application/json;charset=UTF-8'
                }
            })
            .then(function (response) {
                if (response.ok) {
                    return response.text();
                } else {
                    throw Error('Response Not OK');
                }
            })
            .then(function (text) {
                try {
                    return JSON.parse(text);
                } catch (err) {
                    throw Error('Method Not Found');
                }
            })
            .then(function (responseJSON) {
                myInvoices = responseJSON;                
                showChart();
            })
    }

    getChartData();

</script>